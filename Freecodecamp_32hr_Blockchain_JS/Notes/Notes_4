OVERFLOW, UNDERFLOW and CHECKED keyword


Three ways to send ether from a contract :

1) TRANSFER : 
   CODE :  payable(msg.sender).transfer(address(this).balance);
    //here we convert msg.sender, which is of address type to payable type. then we apply transfer method on it.
    address(this) refers to the address of this contract and .balance method gives the total ETh balance
    in this contract. Overall, we r sending the amount this contract has to the msg.sender address via transfer
    method//
    The limitation of transfer method is that it is capped at 2300gas. WHich means if more than 2300 gas is used while sending eth it will throw an error and
    revert the transaction. This method is basically used to send native currency within contracts in the same blockchain network i.e. 
    sending ether within contracts in the Ethereum network. 
    Transfer automatically reverts the transaction. It doesn't need a require statement, like send and call function do, to revert a transaction if it fails.
    
2) SEND : Here, if 2300 gas is exceeded, then it will return a BOOL.
         bool sendSuccess = payable(msg.sender).send(address(this).balance);
         require(sendSuccess, "Send failed");
         
         //We store the value of bool in sendSuccess variable but we this won't revert the transaction in case it fails. So we define a require condition, which
         if returns FALSE, then the transaction will be reverted with a msg "Send failed" , hence reverting our money back otherwise no money revert will happen.//
         
         
3) CALL : This is a powerful func which can be used to call almost any func virtually in all of the etherium without even using ABI.
          1) To send ETH :
          (bool callSuccess) = payable(msg.sender).call{value : address(this).balance}("");
          require(callSuccess, "Call failed");
          
          2) To call other functions :
          let address of the contract that has the func be funcadda and the func to be called be : function foo(string memory _a, uint _x)
          CODE : 
          (bool success, bytes memory returndata) = funcadd.call{value : 111, gas : 5000}(abi.encodeWithSignature("foo(string, uint256)", "CALL" , 123));
          require(success, "Call failed");
          success is whether the call passed or failed and returndata is whatever data is returned by the func called.
          abi.encodeWithSignature is done to encode the func to be called.
          value is in wei.
          refer : https://www.youtube.com/watch?v=xIAs2S9aCKo&list=PLO5VPQH6OWdVQwpQfw9rZ67O6Pjfo6q-p&index=44&ab_channel=SmartContractProgrammer
          

Modifiers : To execute some condition before reading the func body
            modifier OnlyOwner{
                require(msg.sender == owner, "msg.sender is not the owner");
                _;
            }
            
            When this modifer is used in a func say : function foo() public OnlyOwner{
            func body..........
            ...........
            }
            
            Then it means that read the modifier first and then the rest of the code. IF the dash i.e. _; comes before the require statement in the modifier
            then the func code will be read first and then the modifier will be read.

REQUIRE vs REVERT vs ASSERT : https://medium.com/blockchannel/the-use-of-revert-assert-and-require-in-solidity-and-the-new-revert-opcode-in-the-evm-1a3a7990e06e
